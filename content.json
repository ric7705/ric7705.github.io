{"meta":{"title":"Code","subtitle":"","description":"","author":"Ceiere","url":"http://example.com","root":"/"},"pages":[{"title":"Tags","date":"2023-10-14T15:55:42.777Z","updated":"2023-10-14T15:55:42.777Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2023-10-14T14:58:23.973Z","updated":"2023-10-14T14:58:23.973Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Elastic Search Api","slug":"elastic-search-api","date":"2023-10-14T15:16:51.000Z","updated":"2023-10-14T15:20:00.999Z","comments":true,"path":"2023/10/14/elastic-search-api/","link":"","permalink":"http://example.com/2023/10/14/elastic-search-api/","excerpt":"","text":"工作上遇到一個情境, 我需要寫scheduler定期去call ES API, 並persist到postgres上,資料大概10分鐘筆數會有12000上下, 所以必須使用pagination來解決 Elastic search 提供API可對資料進行修改查詢等功能,由於我使用python, 所以直接使用elasticsearch套件來call API,安裝: 1pip install elasticsearch 先call search API, 取得第一筆資料: 1234567result = es.search( index=&quot;你的index&quot;, body=query_body, scroll=&#x27;2m&#x27;, size=10000, sort=&#x27;timestamp:asc&#x27;) 會拿到如下資料: 12345678910111213141516171819&#123; &quot;_scroll_id&quot;: &quot;DnF1ZXJ5VGhlbkZldGNoDgAAAAAEwJa8Fml....&quot;, &quot;_shards&quot;: &#123; &quot;failed&quot;: 0, &quot;skipped&quot;: 0, &quot;successful&quot;: 10, &quot;total&quot;: 10 &#125;, &quot;hits&quot;: &#123; &quot;hits&quot;: [略], &quot;max_score&quot;: null, &quot;total&quot;: &#123; &quot;relation&quot;: &quot;eq&quot;, &quot;value&quot;: 12754 &#125; &#125;, &quot;timed_out&quot;: false, &quot;took&quot;: 3&#125; 其中比較重要的幾個欄位有: _scroll_id: 後續的分頁查詢須帶這個id _shards: 該次query使用了多少shard took: es 查詢花費時間, 單位ms hits.hits: 是list, 實際的documents hits.total: 該query總筆數為多少以該次query來說, 我hits.hits裡面會有10000筆, 因為我request一開始給定size&#x3D;10000,size代表一頁拿多少筆, 預設為10, 最多為10000. 後續的翻頁取資料, 方法就是call scroll API 1result = es.scroll(scroll_id=&#x27;search給的_scroll_id&#x27;, scroll=&#x27;2m&#x27;) 該筆就可拿到剩餘的12754-10000&#x3D;2754筆資料 那如果已經沒資料再繼續翻頁(call scroll)會怎樣?他就給你hits.hits&#x3D;[]的response而已 綜合以上的運作流程, 我們就可以寫出大概的流程了: 123456789def handle(): passresult = es.search() # query第一次handle(result)while(len(result[&#x27;hits.hits&#x27;])&gt;0): # 代表還有資料 result = es.scroll() handle(result) 後記:其實我花最多時間的部分在於查詢到底search跟scroll API要給一個scroll參數, 這是代表啥意思?他其實是代表該次query之後這個view會維持多久, 以上面例子來說, 2m等於會維持2分鐘. 再白話一點就是這兩分鐘之內, 如果你的資料有被異動, 你不會拿到新的資料,這樣做也是挺合理的,我可能每次翻頁後要做一些耗時的IO操作, 可能全部翻完頁要花5m, 這樣我就可以設定scroll&#x3D;1m-5m,確保es給你的資料是程式開始執行瞬間的資料,上面的scroll給1m-5m資料範圍是因為實際上要根據你總共翻幾頁, 要省事一點就直接設5m,不然其實每次翻頁(call scroll)時帶的scroll參數其實都會再刷新view維持的時間.","categories":[{"name":"Survey","slug":"Survey","permalink":"http://example.com/categories/Survey/"}],"tags":[{"name":"Elastic Search","slug":"Elastic-Search","permalink":"http://example.com/tags/Elastic-Search/"}]},{"title":"test","slug":"test","date":"2023-10-14T13:57:22.000Z","updated":"2023-10-14T14:57:02.434Z","comments":true,"path":"2023/10/14/test/","link":"","permalink":"http://example.com/2023/10/14/test/","excerpt":"","text":"接下來，我們要在網誌中建立第一篇新文章，您可以直接從現有的範例文章「Hello World」改寫，但我們更建議您學習 new 指令。 您可以在指令中指定文章的佈局（layout），預設為 post，您可以透過修改 _config.yml 中的 default_layout 設定來指定預設佈局。 佈局（Layout）Hexo 有三種預設佈局：post、page 和 draft，它們分別對應不同的路徑，而您所自定的其他佈局和 post 相同，都儲存至 source&#x2F;_posts 資料夾。 佈局 路徑post source&#x2F;_postspage sourcedraft source&#x2F;_draftsDisabling layoutIf you don’t want an article (post&#x2F;page) to be processed with a theme, set layout: false in its front-matter. Refer to this section for more details. 檔案名稱Hexo 預設以標題做為檔案名稱，但您可編輯 new_post_name 設定來變更預設的檔案名稱，舉例來說，設為 :year-:month-:day-:title.md 可讓您更方便的透過日期來管理文章。 變數 描述:title 標題:year 建立年份（4 位數）:month 建立月份（2 位數）:i_month 建立月份（去掉開頭的零）:day 建立日期（2 位數）:i_day 建立日期（去掉開頭的零）草稿剛剛提到了 Hexo 的一種特殊佈局：draft，這種佈局在建立時會被儲存於 source&#x2F;_drafts 資料夾，您可透過 publish 指令將草稿移動到 source&#x2F;_posts 資料夾，這項指令的使用方式與 new 十分類似，您也可在指令中指定 layout 來指定佈局。","categories":[{"name":"測試","slug":"測試","permalink":"http://example.com/categories/%E6%B8%AC%E8%A9%A6/"}],"tags":[{"name":"城市","slug":"城市","permalink":"http://example.com/tags/%E5%9F%8E%E5%B8%82/"},{"name":"哈囉","slug":"哈囉","permalink":"http://example.com/tags/%E5%93%88%E5%9B%89/"}]},{"title":"Hello World","slug":"hello-world","date":"2023-10-14T13:08:17.593Z","updated":"2023-10-14T13:08:17.593Z","comments":true,"path":"2023/10/14/hello-world/","link":"","permalink":"http://example.com/2023/10/14/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"Survey","slug":"Survey","permalink":"http://example.com/categories/Survey/"},{"name":"測試","slug":"測試","permalink":"http://example.com/categories/%E6%B8%AC%E8%A9%A6/"}],"tags":[{"name":"Elastic Search","slug":"Elastic-Search","permalink":"http://example.com/tags/Elastic-Search/"},{"name":"城市","slug":"城市","permalink":"http://example.com/tags/%E5%9F%8E%E5%B8%82/"},{"name":"哈囉","slug":"哈囉","permalink":"http://example.com/tags/%E5%93%88%E5%9B%89/"}]}